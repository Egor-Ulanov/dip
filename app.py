from flask import Flask, request, jsonify
from flask_cors import CORS
from firebase_admin import credentials, firestore, initialize_app
from datetime import datetime
from bs4 import BeautifulSoup
import requests
import re
import time
import os
import smtplib
from email.mime.text import MIMEText
import json


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
review_model = None
review_vectorizer = None
sentiment_model = None
sentiment_vectorizer = None
db = None

# DEBUG –∏ Email —Ñ—É–Ω–∫—Ü–∏–∏
DEBUG_CHAT_ID = os.getenv("DEBUG_CHAT_ID", "-4661677635") # ID —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

def send_debug_message(text):
    if not TELEGRAM_TOKEN or not DEBUG_CHAT_ID:
        return
    try:
        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", json={
            "chat_id": DEBUG_CHAT_ID,
            "text": f"[DEBUG]\n{text}",
            "parse_mode": "Markdown"
        })
        time.sleep(0.3) # –Ω–µ –¥–∞—ë–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ debug-—Å–æ–æ–±—â–µ–Ω–∏—è:", e)

def send_email(to_email, subject, body):
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    from_email = os.getenv("EMAIL_USERNAME", "egorulanov908@gmail.com") # –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ—é –ø–æ—á—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π ENV
    password = os.getenv("EMAIL_PASSWORD") # —Ö—Ä–∞–Ω–∏ –ø–∞—Ä–æ–ª—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è!

    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = from_email
    msg["To"] = to_email

    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(from_email, password)
        server.sendmail(from_email, to_email, msg.as_string())
        server.quit()
    except Exception as e:
        send_debug_message(f"[Email] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def init_firebase():
    global db
    if db is None:
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...")
            firebase_config = os.getenv("FIREBASE_CONFIG")
            credentials_info = json.loads(firebase_config)
            cred = credentials.Certificate(credentials_info)
            initialize_app(cred)
            db = firestore.client()
            print("‚úÖ Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")

app = Flask(__name__)
CORS(app)

@app.before_request
def before_request():
    init_firebase()

# –ù–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ Hugging Face
HF_MODELS = {
    "spam": "EgorU/rubert_spam_final",
    "toxic": "EgorU/rubert_toxic_model",
    "review": "EgorU/rubert_review_final",
    "sentiment": "EgorU/rubert_sentiment_model"
}

HF_API_TOKEN = os.getenv("HF_API_TOKEN")

def query_hf_model(model_key, text):
    api_url = f"https://api-inference.huggingface.co/models/{HF_MODELS[model_key]}"
    headers = {"Authorization": f"Bearer {HF_API_TOKEN}"} if HF_API_TOKEN else {}
    response = requests.post(api_url, headers=headers, json={"inputs": text})
    if response.status_code == 200:
        return response.json()
    elif response.status_code == 503:
        return "loading"
    else:
        print(f"–û—à–∏–±–∫–∞ Hugging Face API ({model_key}): {response.text}")
        return None

ML_SERVER_URL = "https://ec26-91-103-252-33.ngrok-free.app"

def analyze_text(text):
    try:
        response = requests.post(ML_SERVER_URL, json={"text": text}, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            print("–û—à–∏–±–∫–∞ ML-—Å–µ—Ä–≤–µ—Ä–∞:", response.text)
            return {
                "is_spam": False,
                "spam_confidence": 0.0,
                "is_toxic": False,
                "toxic_confidence": 0.0,
                "is_review": False,
                "review_confidence": 0.0,
                "sentiment": None,
                "sentiment_confidence": 0.0
            }
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ ML-—Å–µ—Ä–≤–µ—Ä—É:", e)
        return {
            "is_spam": False,
            "spam_confidence": 0.0,
            "is_toxic": False,
            "toxic_confidence": 0.0,
            "is_review": False,
            "review_confidence": 0.0,
            "sentiment": None,
            "sentiment_confidence": 0.0
        }

@app.before_request
def before_request_log():
    print(f" NEW REQUEST: {request.method} {request.path}")
@app.route('/', methods=['POST', 'GET'])

def home():
    print("[DEBUG] –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —á—Ç–æ-—Ç–æ –ø—Ä–∏—à–ª–æ!")
    print(request.data)
    return jsonify({"msg": "Hello from root"}), 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@app.route('/check', methods=['POST'])
def check_text():
    try:
        data = request.get_json()
        text = data.get('text')
        email = data.get('email')
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        print(f"Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")

        # –ú–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –∑–¥–µ—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        result = analyze_text(text)
        result_summary = {
            "is_safe": not (result["is_spam"] or result["is_toxic"]),
            "violations": [k for k in ["spam", "toxic"] if result[f"is_{k}"]],
            "results": result
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.collection('checks').add({
            'text': text,
            'email': email,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
            'result': result_summary,
            'date': datetime.now()
        })

        return jsonify(result_summary)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –∏–∑ Firestore
        checks = db.collection('checks').stream()
        data = []

        for check in checks:
            check_data = check.to_dict()
            data.append({
                'date': check_data['date'],  # –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            })

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –¥–∞—Ç–µ
        stats = {}
        for item in data:
            date_str = item['date'].strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            stats[date_str] = stats.get(date_str, 0) + 1

        return jsonify({
            'stats': stats  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/check-url', methods=['POST'])
def check_url():
    data = request.json
    url = data.get('url')
    email = data.get('email')  # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    if not url:
        return jsonify({'error': 'URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ User-Agent
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        response = requests.get(url, headers=headers)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        text = soup.get_text(separator=' ')

        # –ú–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –∑–¥–µ—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        result = analyze_text(text)
        result_summary = {
            "url": url,
            "is_safe": not (result["is_spam"] or result["is_toxic"]),
            "violations": [k for k in ["spam", "toxic"] if result[f"is_{k}"]],
            "results": result
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Firestore
        db.collection('url_checks').add({
            'url': url,
            'email': email,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
            'result': result_summary,
            'date': datetime.now()
        })

        return jsonify(result_summary)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL: {e}")
        return jsonify({'error': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL: {str(e)}"}), 500

# –ø—Ä–æ—Å—Ç–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ message_id
recent_messages = set()

@app.route('/telegram-webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json()
        message = data.get('message')

        if not message:
            send_debug_message("‚ùå –ù–µ—Ç message –≤ payload!")
            return jsonify({"status": "no message"}), 200

        message_id = message.get('message_id')
        if message_id in recent_messages:
            send_debug_message(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç message_id: {message_id}")
            return jsonify({"status": "duplicate"}), 200
        if message_id:
            recent_messages.add(message_id)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat = message['chat']
        group_id = str(chat['id'])
        group_title = chat.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        from_user = message.get('from', {})
        user_id = from_user.get('id')
        author = f"{from_user.get('first_name', '')}_{from_user.get('last_name', '')}_{user_id}".strip("_")
        user_text = message.get('text', '')

        # send_debug_message(f"‚úÖ Webhook –ø–æ–ª—É—á–µ–Ω –æ—Ç {author} –≤ –≥—Ä—É–ø–ø–µ {group_title}\n–¢–µ–∫—Å—Ç: {user_text}")

        if user_text.strip() == "/getid":
            telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
            telegram_api_url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
            requests.post(telegram_api_url, json={
                "chat_id": group_id,
                "text": f"ID –≥—Ä—É–ø–ø—ã: `{group_id}`\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_title}",
                "parse_mode": "Markdown"
            })
            return jsonify({"status": "sent chat id"}), 200

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
        group_doc = db.collection('groups').document(group_id).get()
        if not group_doc.exists:
            send_debug_message(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group_title} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            return jsonify({"status": "group not registered"}), 200

        group_data = group_doc.to_dict() or {}
        admin_email = group_data.get('info', {}).get('admin_email')
        if not admin_email:
            send_debug_message(f"‚ö†Ô∏è –£ –≥—Ä—É–ø–ø—ã {group_title} –Ω–µ—Ç admin_email.")
            return jsonify({"status": "no admin email"}), 200

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        spam_check = analyze_text(user_text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
        # –í —ç—Ç–æ–º –±–ª–æ–∫–µ –º—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º analyze_text, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π, –Ω–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        # sentences = re.split(r'(?<=[.!?])\s+', user_text)
        # is_safe –∏ violations –±—É–¥—É—Ç –≤—ã—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ spam_check –∏ toxic_check –∏–∑ analyze_text
        
        is_safe = not (spam_check["is_spam"] or spam_check["is_toxic"])
        violations = []
        if spam_check["is_spam"]:
            violations.append("–°–ø–∞–º")
        if spam_check["is_toxic"]:
            violations.append("–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é —Ç–∞–∫.
        results = {
            "text_analysis": spam_check # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç analyze_text
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º –∏ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
        review_flag = spam_check["is_review"] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç analyze_text
        sentiment_flag = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if review_flag:
            sentiment_flag = spam_check["sentiment"] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç analyze_text
        
        # send_debug_message(f"üì¶ checks: {user_text, results}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            db.collection('groups').document(group_id).collection('checks').document().set({
                'text': user_text,
                'author': author,
                'review': review_flag,
                'sentiment': sentiment_flag,
                'spam_check': spam_check,  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º
                'result': {
                    'is_safe': is_safe,
                    'violations': violations,
                    'results': results # –¢–µ–ø–µ—Ä—å 'results' —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
                },
                'date': datetime.now()
            })

            if not is_safe or spam_check['is_spam']:
                violations_text = ', '.join(violations) if violations else '–Ω–µ—Ç'
                email_body = (
                    f"–í Telegram-–≥—Ä—É–ø–ø–µ ¬´{group_title}¬ª ({group_id}) "
                    f"–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                    f"–ê–≤—Ç–æ—Ä: {author}\n"
                    f"–¢–µ–∫—Å—Ç: {user_text}\n\n"
                    f"–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞' if not is_safe else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞'}\n"
                    f"–°–ø–∞–º: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω' if spam_check['is_spam'] else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}\n"
                    f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—Å–ø–∞–º): {spam_check['spam_confidence']:.2%}\n"
                    f"–ù–∞—Ä—É—à–µ–Ω–∏—è: {violations_text}"
                )
                send_email(admin_email, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", email_body)

        except Exception as e:
            send_debug_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firestore: {e}")

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {str(e)}"
        send_debug_message(error_msg)
        return jsonify({"error": str(e)}), 500

@app.route('/test-webhook', methods=['POST'])
def test_webhook():
    try:
        data = request.get_json()
        message = data.get('message')
        if not message:
            return jsonify({"status": "no message"}), 200

        chat = message['chat']
        user_text = message.get('text', '')
        chat_id = str(chat.get('id', 'unknown'))

        # –ü—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
        db.collection('groups').document("test").collection('checks').add({
            'text': user_text,
            'date': datetime.now()
        })

        return jsonify({"status": "saved"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/upload-image', methods=['POST'])
def upload_image():
    try:
        file = request.files['file']
        upload_preset = 'diplom'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Cloudinary
        form_data = {
            'file': file,
            'upload_preset': upload_preset
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Cloudinary
        response = requests.post(
            f'https://api.cloudinary.com/v1_1/dh2qb7atd/image/upload',
            files=form_data
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        result = response.json()
        
        return jsonify({
            'url': result['secure_url']
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/send-test-email', methods=['GET'])
def send_test_email():
    test_email = request.args.get('to')
    if not test_email:
        return jsonify({"error": "–£–∫–∞–∂–∏ ?to=example@mail.com –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

    try:
        send_email(
            test_email,
            "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Flask",
            "–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"
        )
        return jsonify({"status": f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {test_email}"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    try:
        app.run(host='0.0.0.0', port=port)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
