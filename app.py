from flask import Flask, request, jsonify
from flask_cors import CORS
from firebase_admin import credentials, firestore, initialize_app
from datetime import datetime
from bs4 import BeautifulSoup
import requests
import re
from functools import lru_cache
import time
import os
import smtplib
from email.mime.text import MIMEText
import json
import joblib
from tensorflow.keras.models import load_model

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
REVIEW_MODEL_PATH = "review_detection_model.keras"
REVIEW_VECTORIZER_PATH = "review_vectorizer.pkl"
SENTIMENT_MODEL_PATH = "sentiment_model.keras"
SENTIMENT_VECTORIZER_PATH = "sentiment_vectorizer.pkl"

# –ó–∞–≥—Ä—É–∑–∫–∞
review_model = load_model(REVIEW_MODEL_PATH)
review_vectorizer = joblib.load(REVIEW_VECTORIZER_PATH)

sentiment_model = load_model(SENTIMENT_MODEL_PATH)
sentiment_vectorizer = joblib.load(SENTIMENT_VECTORIZER_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
firebase_config = os.getenv("FIREBASE_CONFIG")
credentials_info = json.loads(firebase_config)
cred = credentials.Certificate(credentials_info)

def is_review(text):
    try:
        X = review_vectorizer.transform([text])
        # send_debug_message(f"[ReviewCheck] –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {X}")
        prediction = review_model.predict(X)[0][0]
        send_debug_message(f"[ReviewCheck] –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}")
        return prediction > 0.5
    except Exception as e:
        send_debug_message(f"[ReviewCheck] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return False

def is_positive_review(text):
    try:
        X = sentiment_vectorizer.transform([text])
        prediction = sentiment_model.predict(X)[0][0]
        return prediction > 0.5
    except Exception as e:
        send_debug_message(f"[SentimentCheck] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return None

# print("–ë–æ—Ç —Ç–æ–∫–µ–Ω:",os.getenv("TELEGRAM_BOT_TOKEN"))

initialize_app(cred)
db = firestore.client()

# –¢–æ–∫–µ–Ω API Hugging Face
HF_API_TOKEN = os.getenv("HF_API_TOKEN")

app = Flask(__name__)
CORS(app)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Hugging Face Inference API
def query_huggingface_api(text):
    headers = {
        "Authorization": f"Bearer {HF_API_TOKEN}"
    }
    api_url = "https://api-inference.huggingface.co/models/SkolkovoInstitute/russian_toxicity_classifier"

    response = requests.post(api_url, headers=headers, json={"inputs": text})
    if response.status_code == 200:
        try:
            result = response.json()
            print("–û—Ç–≤–µ—Ç Hugging Face API:", result)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
            if isinstance(result, list) and len(result) > 0 and isinstance(result[0], list):
                result = result[0]  # –£–±–∏—Ä–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(result, list) and all(isinstance(item, dict) for item in result):
                return result
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            return [{"label": "error", "score": 0.0}]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
    elif response.status_code == 503:
        return [{"label": "loading", "score": 0.0}]  # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    else:
        print(f"–û—à–∏–±–∫–∞ API Hugging Face: {response.text}")
        return [{"label": "error", "score": 0.0}]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É

DEBUG_CHAT_ID = "-4661677635"  # ID —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

def send_debug_message(text):
    if not TELEGRAM_TOKEN or not DEBUG_CHAT_ID:
        return
    try:
        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", json={
            "chat_id": DEBUG_CHAT_ID,
            "text": f"[DEBUG]\n{text}",
            "parse_mode": "Markdown"
        })
        time.sleep(0.3)  # üëà –Ω–µ –¥–∞—ë–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ debug-—Å–æ–æ–±—â–µ–Ω–∏—è:", e)

def send_email(to_email, subject, body):
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    from_email = "egorulanov908@gmail.com"  # –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ—é –ø–æ—á—Ç—É
    password = os.getenv("EMAIL_PASSWORD")  # —Ö—Ä–∞–Ω–∏ –ø–∞—Ä–æ–ª—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è!

    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = from_email
    msg["To"] = to_email

    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(from_email, password)
        server.sendmail(from_email, to_email, msg.as_string())
        server.quit()
    except Exception as e:
        send_debug_message(f"[Email] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@app.before_request
def before_request_log():
    print(f" NEW REQUEST: {request.method} {request.path}")
@app.route('/', methods=['POST', 'GET'])

def home():
    print("[DEBUG] –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —á—Ç–æ-—Ç–æ –ø—Ä–∏—à–ª–æ!")
    print(request.data)
    return jsonify({"msg": "Hello from root"}), 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@app.route('/check', methods=['POST'])
def check_text():
    try:
        data = request.get_json()
        text = data.get('text')
        email = data.get('email')  # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        print(f"Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'(?<=[.!?])\s+', text)
        results = []
        violations = []

        is_safe = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω

        for sentence in sentences:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Hugging Face
            hf_result = query_huggingface_api(sentence)

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ hf_result ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if not isinstance(hf_result, list) or not all(isinstance(pred, dict) for pred in hf_result):
                hf_result = [{"label": "error", "score": 0.0}]  # –ó–∞–≥–ª—É—à–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω—ã–º
            is_toxic = any(pred["label"] == "toxic" and pred["score"] > 0.5 for pred in hf_result)
            if is_toxic:
                is_safe = False
                violations.append(sentence)

            results.append({
                "sentence": sentence,
                "is_toxic": is_toxic,
                "predictions": hf_result
            })

        result_summary = {
            "is_safe": is_safe,
            "violations": violations,
            "results": results
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.collection('checks').add({
            'text': text,
            'email': email,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
            'result': result_summary,
            'date': datetime.now()
        })

        return jsonify(result_summary)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –∏–∑ Firestore
        checks = db.collection('checks').stream()
        data = []

        for check in checks:
            check_data = check.to_dict()
            data.append({
                'date': check_data['date'],  # –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            })

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –¥–∞—Ç–µ
        stats = {}
        for item in data:
            date_str = item['date'].strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            stats[date_str] = stats.get(date_str, 0) + 1

        return jsonify({
            'stats': stats  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/check-url', methods=['POST'])
def check_url():
    data = request.json
    url = data.get('url')
    email = data.get('email')  # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    if not url:
        return jsonify({'error': 'URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ User-Agent
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        response = requests.get(url, headers=headers)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        text = soup.get_text(separator=' ')

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–≤—ã–∑—ã–≤–∞–µ–º Hugging Face API)
        sentences = re.split(r'(?<=[.!?])\s+', text)
        results = []
        violations = []
        is_safe = True

        for sentence in sentences:
            hf_result = query_huggingface_api(sentence)

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ hf_result –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            if not isinstance(hf_result, list) or not all(isinstance(pred, dict) for pred in hf_result):
                hf_result = [{"label": "error", "score": 0.0}]

            is_toxic = any(pred["label"] == "toxic" and pred["score"] > 0.5 for pred in hf_result)
            if is_toxic:
                is_safe = False
                violations.append(sentence)

            results.append({
                "sentence": sentence,
                "is_toxic": is_toxic,
                "predictions": hf_result
            })

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        result_summary = {
            "url": url,
            "is_safe": is_safe,
            "violations": violations,
            "results": results
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Firestore
        db.collection('url_checks').add({
            'url': url,
            'email': email,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
            'result': result_summary,
            'date': datetime.now()
        })

        return jsonify(result_summary)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL: {e}")
        return jsonify({'error': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL: {str(e)}"}), 500

# –ø—Ä–æ—Å—Ç–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ message_id
recent_messages = set()

@app.route('/telegram-webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json()
        message = data.get('message')

        if not message:
            send_debug_message("‚ùå –ù–µ—Ç message –≤ payload!")
            return jsonify({"status": "no message"}), 200

        message_id = message.get('message_id')
        if message_id in recent_messages:
            send_debug_message(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç message_id: {message_id}")
            return jsonify({"status": "duplicate"}), 200
        if message_id:
            recent_messages.add(message_id)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat = message['chat']
        group_id = str(chat['id'])
        group_title = chat.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        from_user = message.get('from', {})
        user_id = from_user.get('id')
        author = f"{from_user.get('first_name', '')}_{from_user.get('last_name', '')}_{user_id}".strip("_")
        user_text = message.get('text', '')


        # send_debug_message(f"‚úÖ Webhook –ø–æ–ª—É—á–µ–Ω –æ—Ç {author} –≤ –≥—Ä—É–ø–ø–µ {group_title}\n–¢–µ–∫—Å—Ç: {user_text}")

        if user_text.strip() == "/getid":
            telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
            telegram_api_url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
            requests.post(telegram_api_url, json={
                "chat_id": group_id,
                "text": f"ID –≥—Ä—É–ø–ø—ã: `{group_id}`\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_title}",
                "parse_mode": "Markdown"
            })
            return jsonify({"status": "sent chat id"}), 200

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
        group_doc = db.collection('groups').document(group_id).get()
        if not group_doc.exists:
            send_debug_message(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group_title} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            return jsonify({"status": "group not registered"}), 200

        group_data = group_doc.to_dict() or {}
        admin_email = group_data.get('info', {}).get('admin_email')
        # send_debug_message(f"üì¶ group_data: {json.dumps(group_data, ensure_ascii=False)}")
        if not admin_email:
            send_debug_message(f"‚ö†Ô∏è –£ –≥—Ä—É–ø–ø—ã {group_title} –Ω–µ—Ç admin_email.")
            return jsonify({"status": "no admin email"}), 200
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
        sentences = re.split(r'(?<=[.!?])\s+', user_text)
        is_safe = True
        violations = []
        results = []

        for sentence in sentences:
            hf_result = query_huggingface_api(sentence)
            if not isinstance(hf_result, list):
                hf_result = [{"label": "error", "score": 0.0}]
            is_toxic = any(pred.get("label") == "toxic" and pred.get("score", 0) > 0.5 for pred in hf_result)
            if is_toxic:
                is_safe = False
                violations.append(sentence)
            results.append({
                "sentence": sentence,
                "is_toxic": is_toxic,
                "predictions": hf_result
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º
        review_flag = is_review(user_text)
        sentiment_flag = None
        if review_flag:
            sentiment_flag = is_positive_review(user_text)
        
        # send_debug_message(f"üì¶ checks: {user_text, results}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            send_debug_message(f"üì• –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author}: {user_text}")
            db.collection('groups').document(group_id).collection('checks').document().set({
                'text': user_text,
                'author': author,
                'review': review_flag,
                'sentiment': sentiment_flag,
                'result': {
                    'is_safe': is_safe,
                    'violations': violations,
                    'results': results
                },
                'date': datetime.now()
            })
            send_debug_message(f"–°–æ–æ–±—â–µ–Ω–∏–µ review: {review_flag}, sentiment: {sentiment_flag}, is_safe: {is_safe}, violations: {violations},results: {results}")

            if not is_safe:
                email_body = (
                    f"–í Telegram-–≥—Ä—É–ø–ø–µ ¬´{group_title}¬ª ({group_id}) "
                    f"–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                    f"–ê–≤—Ç–æ—Ä: {author}\n"
                    f"–¢–µ–∫—Å—Ç: {user_text}\n\n"
                    f"–ù–∞—Ä—É—à–µ–Ω–∏—è: {', '.join(violations)}"
                )
                send_email(admin_email, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", email_body)
        except Exception as e:
            send_debug_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firestore: {e}")

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {str(e)}"
        send_debug_message(error_msg)
        return jsonify({"error": str(e)}), 500

@app.route('/test-webhook', methods=['POST'])
def test_webhook():
    try:
        data = request.get_json()
        message = data.get('message')
        if not message:
            return jsonify({"status": "no message"}), 200

        chat = message['chat']
        user_text = message.get('text', '')
        chat_id = str(chat.get('id', 'unknown'))

        # –ü—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
        db.collection('groups').document("test").collection('checks').add({
            'text': user_text,
            'date': datetime.now()
        })

        return jsonify({"status": "saved"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/send-test-email', methods=['GET'])
def send_test_email():
    test_email = request.args.get('to')
    if not test_email:
        return jsonify({"error": "–£–∫–∞–∂–∏ ?to=example@mail.com –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

    try:
        send_email(
            test_email,
            "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Flask",
            "–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ"
        )
        return jsonify({"status": f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {test_email}"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"‚úÖ Starting server on port: {port}")
    app.run(host='0.0.0.0', port=port)
